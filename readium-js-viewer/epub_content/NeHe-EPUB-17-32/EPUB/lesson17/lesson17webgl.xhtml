<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" >
	<head>
		<title>Three.js tutorial - Lesson 17</title>
		<meta charset="utf-8"/>

		<!-- The following meta line optimizes the site for mobile devices. It sets the viewport size
    	     to the screen size, so it will be displayed maximized, but unscaled. -->
		<meta name="viewport" content="width=768, height=1024"/>
        <link rel="stylesheet" type="text/css" href="../css/fixed.css" />

		<!-- Include the necessary libs -->
		<script src="../three-js/three.js" type="text/javascript"></script>
		<script src="../three-js/Detector.js" type="text/javascript"></script>
		<script src="../three-js/stats.js" type="text/javascript"></script>
        <script src="../gfx/gfx-scene.js" type="text/javascript"></script>
	</head>
	<body>
		<!-- This JavaScript block encloses the Three.js commands -->
		<script type="text/javascript">
            // allocate the Scene object, and set the camera position
            var gfxScene = new GFX.Scene( {
				cameraPos:[0,0,10],
				canvasWidth : 768,
				canvasHeight : 1024,
                displayStats:true
			});

			// x and y rotation
			var xRotation = 0.0;
			var yRotation = 0.0;

			// Rotation speed around x and y axis
			var xSpeed = 0.01;
			var ySpeed = 0.01;

			// Global mesh object of the cube
			var cubeMesh;

			// Initialize the demo
			initializeDemo();

			// Animate the scene
			animateScene();

			/**
			 *  Initialize the demo's local aspects, i.e not the scene.
			 */
			function initializeDemo() {
				// Create the cube
				var geometry = new THREE.BoxGeometry(2.0, 2.0, 2.0);

                // Load an image as texture
                var texture = THREE.ImageUtils.loadTexture("images/texture-atlas.jpg");
                var material = new THREE.MeshLambertMaterial( { map : texture } );

                var bricks = [
                    new THREE.Vector2(0, .666),
                    new THREE.Vector2(.5, .666),
                    new THREE.Vector2(.5, 1),
                    new THREE.Vector2(0, 1)
                ];

                var clouds = [
                    new THREE.Vector2(.5, .666),
                    new THREE.Vector2(1, .666),
                    new THREE.Vector2(1, 1),
                    new THREE.Vector2(.5, 1)];

                var crate = [
                    new THREE.Vector2(0, .333),
                    new THREE.Vector2(.5, .333),
                    new THREE.Vector2(.5, .666),
                    new THREE.Vector2(0, .666)];

                var stone = [
                    new THREE.Vector2(.5, .333),
                    new THREE.Vector2(1, .333),
                    new THREE.Vector2(1, .666),
                    new THREE.Vector2(.5, .666)];

                var water = [
                    new THREE.Vector2(0, 0),
                    new THREE.Vector2(.5, 0),
                    new THREE.Vector2(.5, .333),
                    new THREE.Vector2(0, .333)];

                var wood = [
                    new THREE.Vector2(.5, 0),
                    new THREE.Vector2(1, 0),
                    new THREE.Vector2(1, .333),
                    new THREE.Vector2(.5, .333)];

                geometry.faceVertexUvs[0][0] = [ bricks[0], bricks[1], bricks[3] ];
                geometry.faceVertexUvs[0][1] = [ bricks[1], bricks[2], bricks[3] ];

                geometry.faceVertexUvs[0][2] = [ clouds[0], clouds[1], clouds[3] ];
                geometry.faceVertexUvs[0][3] = [ clouds[1], clouds[2], clouds[3] ];

                geometry.faceVertexUvs[0][4] = [ crate[0], crate[1], crate[3] ];
                geometry.faceVertexUvs[0][5] = [ crate[1], crate[2], crate[3] ];

                geometry.faceVertexUvs[0][6] = [ stone[0], stone[1], stone[3] ];
                geometry.faceVertexUvs[0][7] = [ stone[1], stone[2], stone[3] ];

                geometry.faceVertexUvs[0][8] = [ water[0], water[1], water[3] ];
                geometry.faceVertexUvs[0][9] = [ water[1], water[2], water[3] ];

                geometry.faceVertexUvs[0][10] = [ wood[0], wood[1], wood[3] ];
                geometry.faceVertexUvs[0][11] = [ wood[1], wood[2], wood[3] ];

                cubeMesh = new THREE.Mesh(geometry,  material);
				gfxScene.add(cubeMesh);
 			}

			/**
			 * Animate the scene and call rendering.
			 */
			function animateScene(){
				// Update and set the rotation around x and y axis
				xRotation += xSpeed;
				yRotation += ySpeed;
				cubeMesh.rotation.set(xRotation, yRotation, 0.0);

				// Tell the browser to call this function back
				requestAnimationFrame(animateScene);

                // Map the 3D scene down to the 2D screen (render the frame)
                gfxScene.renderScene();
			}

		</script>
	</body>
</html>
