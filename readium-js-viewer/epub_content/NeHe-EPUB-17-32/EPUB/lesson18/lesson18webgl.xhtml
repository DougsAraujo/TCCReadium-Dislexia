<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
        <title>NEHE Lesson 18</title>
		<meta charset="UTF-8"/>

		<!-- Set the viewport size to the screen size, so it will be displayed maximized, but unscaled. -->
		<meta name="viewport" content="width=768, height=1024"/>
		<link rel="stylesheet" type="text/css" href="../css/fixed.css" />

		<!-- Include several libraries from THREE.js and the Scene class  -->
		<script src="../three-js/three.js" type="text/javascript"></script>
		<script src="../three-js/Detector.js" type="text/javascript"></script>
		<script src="../three-js/stats.js" type="text/javascript"></script>
        <script src="../three-js/dat.gui.min.js" type="text/javascript"></script>
     	<script src="../gfx/OrbitControls-Touch-Ortho.js" type="text/javascript"></script>
		<script src="../gfx/gfx-scene.js" type="text/javascript"></script>
	</head>
	<body>
	<script type="text/javascript">
        var gui;
        var quadTexture;
        var	quadric;
        var	quadGeometry;
        var	quadMaterial;
        var	materialType = 0;	// texture, paint or wire
        var	quadType = 0;

        // allocate the Scene object, request orbitControls, some of 3D axes 10 units high and the stats
        var gfxScene = new GFX.Scene( { cameraPos : [0, 6, 12],
			canvasHeight:1024,
			canvasWidth:768,
            axesHeight:10,
            controls:true,
            displayStats:true });

        setupDatGUI();

        // then initialize our demo's stuff
        initializeDemo();

        // Animate the scene
        animateScene();

        /**
         * Initialize the Demo.
         */
        function initializeDemo() {

            // Load an image as texture
            quadTexture = new THREE.ImageUtils.loadTexture("images/clouds.jpg");

            quadMaterial = makeMaterial(materialType);

            quadric = makeQuad(0);
        }

        function makeMaterial ( matType ) {
            var quadMat;
            materialType = matType;
            if ( materialType === 1)
                quadMat = new THREE.MeshPhongMaterial({ map:quadTexture, side:THREE.DoubleSide });
            else if (materialType === 2)
                quadMat = new THREE.MeshBasicMaterial({ wireframe:true });
            else
                quadMat = new THREE.MeshLambertMaterial({ color: '#00abb1' });

            return quadMat;
        }

        function makeQuad( qType ) {

            quadType = qType;

            gfxScene.remove( quadric );

            switch ( quadType ) {
                case 0:
                    quadGeometry = new THREE.BoxGeometry(2.0, 2.0, 2.0);
                    break;
                case 1:
                    quadGeometry = new THREE.CircleGeometry(2.0, 32);
                    break;
                case 2:
                    quadGeometry = new THREE.CylinderGeometry(2.0, 2.0, 5, 32);
                    break;
                case 3:
                    quadGeometry = new THREE.DodecahedronGeometry(2.0);
                    break;
                case 4:
                    quadGeometry = new THREE.IcosahedronGeometry(2.0);
                    break;
                case 5:
                    quadGeometry = new THREE.CylinderGeometry(0.0, 2.0, 5, 64);
                    break;
                case 6:
                    quadGeometry = new THREE.OctahedronGeometry(2.0, 2.0, 2.0);
                    break;
                case 7:
                    quadGeometry = new THREE.RingGeometry(0.5, 2.0, 32);
                    break;
                case 8:
                    quadGeometry = new THREE.SphereGeometry(2.0, 32, 32);
                    break;
                case 9:
                    quadGeometry = new THREE.TetrahedronGeometry(2.0);
                    break;
                case 10:
                    quadGeometry = new THREE.TorusGeometry(2.0, 0.5, 16, 100);
                    break;
                case 11:
                    quadGeometry = new THREE.TorusKnotGeometry(2.0, 0.5, 100, 16);
                    break;
            }

            quadMesh = new THREE.Mesh(quadGeometry, quadMaterial);

            gfxScene.add(quadMesh);

            return quadMesh;
        }

        /**
         * Specify the parameters and user interface
         */
        function setupDatGUI() {
            var quadList = [
                "Box",
                "Circle",
                "Cylinder",
                "Dodecahedron",
                "Icosahedron",
                "Cone",
                "Octahedron",
                "Ring",
                "Sphere",
                "Tetrahedron",
                "Torus",
                "TorusKnot"
            ];

            var materialList = ["Color", "Texture", "Wireframe"];
            var options = [];

            options.quadType = 0;
            options.materialType = 0;
            options.material = materialList[0];

            gui = new dat.GUI({autoplace:false});

            gui.add(options, "material", [
                materialList[0],
                materialList[1],
                materialList[2]
            ]).onChange(function() {
                materialType = materialList.indexOf(options.material);
                quadMaterial = makeMaterial(materialType);
                quadric = makeQuad(quadType);
            });

            options.quad = quadList[0];

            gui.add(options, "quad", [
                quadList[0],
                quadList[1],
                quadList[2],
                quadList[3],
                quadList[4],
                quadList[5],
                quadList[6],
                quadList[7],
                quadList[8],
                quadList[9],
                quadList[10],
                quadList[11]

            ]).onChange(function() {

                quadType = quadList.indexOf(options.quad);
                quadric = makeQuad(quadType);
            });

            var guiContainer = document.createElement( 'div' );
            guiContainer.setAttribute("style", "position:absolute;top:0;left:0;z-index:10;");
            document.body.appendChild( guiContainer );
            //var guiContainer = document.getElementById('dat.gui');
            guiContainer.appendChild(gui.domElement);
        }

        /**
         * Animate the scene and call rendering.
         */
        function animateScene() {

            // Tell the browser to call this function when page is visible
            requestAnimationFrame(animateScene);

            // Map the 3D scene down to the 2D screen (render the frame)
            gfxScene.renderScene();
        }

	</script>
	</body>
</html>
