<!DOCTYPE html>	<!-- Tells the browser that the page uses the HTML5 standard -->
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<!--
  			Roughly based (or inspired by) NeHe Tutorial 23
  			Original:  http://nehe.gamedev.net/tutorial/sphere_mapping_quadrics_in_opengl/15005/
  
  			@author: rkwright@geofx.com
		 -->
		<title>NEHE Lesson 23</title>
		<meta charset="UTF-8"/>

		<!-- Set the viewport size to the screen size, so it will be displayed maximized, but unscaled. -->
		<meta name="viewport" content="width=768, height=1024, initial-scale=1"/>
		<link rel="stylesheet" type="text/css" href="../css/fixed.css" />

		<!-- Include several libraries from THREE.js and the Scene class  -->
		<script src="../three-js/three.js" type="text/javascript"></script>
		<script src="../three-js/Detector.js" type="text/javascript"></script>
		<script src="../three-js/stats.js" type="text/javascript"></script>
		<script src="../gfx/OrbitControls-Touch-Ortho.js" type="text/javascript"></script>
		<script src="../gfx/gfx-scene.js" type="text/javascript"></script>
	</head>
	<body>	
		<script type="text/javascript"><![CDATA[
			var quadTexture;
			var	quadric;
			var	quadGeometry;
			var	quadMaterial;
			var	quadType = '2';
            var backgroundScene;
            var backgroundCamera;

            // allocate the Scene object, request orbitControls, some of 3D axes 10 units high and the stats
			var gfxScene = new GFX.Scene( {
                cameraPos : [0, 6, 8],
                canvasWidth : 768,
                canvasHeight : 1024,
                axesHeight:10,
                controls:true,
                displayStats:true });

            // then initialize our demo's stuff
			initializeDemo();
	
			// Animate the scene
			animateScene();
	
			/**
			 * Initialize the Demo.  
			 */
			function initializeDemo() {
	
				// Load an image as texture
				quadTexture = new THREE.ImageUtils.loadTexture("images/ElCapitanSphere.jpg");

				quadMaterial = makeMaterial('t');
	
				quadric = makeQuad(quadType);

                var background = THREE.ImageUtils.loadTexture( 'images/ElCapitanSquare.jpg' );
                var backgroundMesh = new THREE.Mesh(
                    new THREE.PlaneGeometry(2, 2, 0),
                    new THREE.MeshBasicMaterial({
                        map: background
                    }));

                backgroundMesh.material.depthTest = false;
                backgroundMesh.material.depthWrite = false;

                // Create your background scene
                backgroundScene = new THREE.Scene();
                backgroundCamera = new THREE.Camera();
                backgroundScene.add(backgroundMesh );
			}
	
			function makeMaterial ( matType ) {
				var quadMat;
				var materialType = matType;
				if ( materialType === 't')
					quadMat = new THREE.MeshPhongMaterial({
					    map:quadTexture,
                        color: 0xffffff,
                        specular: 0x050505,
                        shininess: 50
					});

				else if (materialType === 'w')
					quadMat = new THREE.MeshBasicMaterial({ wireframe:true });
				else
					quadMat = new THREE.MeshLambertMaterial({ color: '#00abb1' });
				
				return quadMat;
			}
	
			function makeQuad( qType ) {
	
				quadType = qType;
				
				gfxScene.remove( quadric );
	
				switch ( quadType ) {
					case '0':
						quadGeometry = new THREE.BoxGeometry(4.0, 4.0, 4.0);
					break;		
					case '1':
						quadGeometry = new THREE.CylinderGeometry(2.0, 2.0, 5, 32);
					break;
					case '2':
						quadGeometry = new THREE.SphereGeometry(2.0, 32, 32);
                        // modify UVs to accommodate the spherized
                        var faceVertexUvs = quadGeometry.faceVertexUvs[ 0 ];
                        for ( var i = 0; i < faceVertexUvs.length; i++ ) {

                            var uvs = faceVertexUvs[i];
                            var face = quadGeometry.faces[i];

                            for ( var j = 0; j < 3; j++ ) {

                                uvs[j].x = face.vertexNormals[j].x * 0.5 + 0.5;
                                uvs[j].y = face.vertexNormals[j].y * 0.5 + 0.5;

                            }
                        }
					break;
				}

				var quad = new THREE.Mesh(quadGeometry, quadMaterial);
				
				gfxScene.add(quad);
				
				return quad;
			}
	
			/**
			 * Animate the scene and call rendering.
			 */
			function animateScene() {
	
				// Tell the browser to call this function when page is visible
				requestAnimationFrame(animateScene);

                gfxScene.renderer.autoClear = false;
                gfxScene.renderer.clear();

				// Map the 3D scene down to the 2D screen (render the frame)
                gfxScene.renderer.render(backgroundScene, backgroundCamera );
                gfxScene.renderScene();
			}

        ]]></script>
	</body>
</html>
